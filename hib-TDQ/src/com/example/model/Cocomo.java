/**
 * This class was automatically generated by using the new JPA Entities from Tables.
 */
package com.example.model;

import java.io.Serializable;
import java.math.BigDecimal;

import javax.persistence.*;

/**
 * Cocomo is the persistent class for the cocomo database table.
 * @author Georgios Skourletopoulos
 * @version 4 August 2013
 */
@Entity
@NamedQuery(name="Cocomo.findAll", query="SELECT c FROM Cocomo c")
public class Cocomo implements Serializable {

	private static final long serialVersionUID = 1L;

	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	private Long id;    //each COCOMO estimation has a unique ID

	private String confidence;
	private String developmentMode;
	private String justification;
	private String name;
	private BigDecimal productSize;

	@ManyToOne
	@JoinColumn(name = "userId")
	private UserLogin userId;

	public Cocomo() {}    //the implicit constructor

	/**
	 * The explicit contructor that is used to create the COCOMO object.
	 * @param userId each user's ID (each user has a unique ID)
	 * @param name the estimation's name
	 * @param developmentMode the software development mode
	 * @param productSize the software product size
	 * @param confidence the confidence for the estimation provided
	 * @param justification the justification for the Project Manager
	 */
	public Cocomo (UserLogin userId, String name, String developmentMode, 
			BigDecimal productSize, String confidence, String justification) {
		this.confidence = confidence;
		this.developmentMode = developmentMode;
		this.justification = justification;
		this.name = name;
		this.productSize = productSize;
		this.userId = userId;
	}

	/**
	 * Getter for the estimation's ID
	 * @return this.id as Long
	 */
	public Long getId() {
		return this.id;
	}

	/**
	 * Getter for the estimation's confidence
	 * @return this.confidence as a String
	 */
	public String getConfidence() {
		return this.confidence;
	}

	/**
	 * Setter for the estimation's confidence
	 * @param confidence the new confidence
	 */
	public void setConfidence(String confidence) {
		this.confidence = confidence;
	}

	/**
	 * Getter for the estimation's software development mode
	 * @return this.developmentMode as a String
	 */
	public String getDevelopmentMode() {
		return this.developmentMode;
	}

	/**
	 * Setter for the estimation's software development mode
	 * @param developmentMode the new development mode
	 */
	public void setDevelopmentMode(String developmentMode) {
		this.developmentMode = developmentMode;
	}

	/**
	 * Getter for the estimation's justification
	 * @return this.justification as a String
	 */
	public String getJustification() {
		return this.justification;
	}

	/**
	 * Setter for the estimation's justification
	 * @param justification the new justification
	 */
	public void setJustification(String justification) {
		this.justification = justification;
	}

	/**
	 * Getter for the estimation's name
	 * @return this.name as a String
	 */
	public String getName() {
		return this.name;
	}

	/**
	 * Setter for the estimation's name
	 * @param name the new name
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * Getter for the estimation's software product size
	 * @return this.productSize as a BigDecimal
	 */
	public BigDecimal getProductSize() {
		return this.productSize;
	}

	/**
	 * Setter for the estimation's software product size
	 * @param productSize the new software product size
	 */
	public void setProductSize(BigDecimal productSize) {
		this.productSize = productSize;
	}

	/**
	 * Getter for the user that perform that estimation by his ID
	 * @return this.userId as a UserLogin object
	 */
	public UserLogin getUserId() {
		return this.userId;
	}

	/**
	 * Setter for the user that owns that estimation by his ID
	 * @param userId the new user ID
	 */
	public void setUserId(UserLogin userId) {
		this.userId = userId;
	}

	/**
	 * Redefining the equality between two Cocomo objects. 
	 */
	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (!(o instanceof Cocomo)) {
			return false;
		}
		final Cocomo cocomo = (Cocomo) o;
		if (name == null) {
			return cocomo.name == null;
		}
		else if (!userId.equals(cocomo.getUserId()))
			return false;

		return name.equalsIgnoreCase(cocomo.name);
	}

	/**
	 * Redefining the hash code of a Cocomo object.
	 * @return name.hashCode() + userId.hashCode(), the hash code of the object
	 */
	@Override
	public int hashCode() {
		if (name != null) {
			return (name.hashCode() + userId.hashCode());
		}
		return 0;
	}
}
