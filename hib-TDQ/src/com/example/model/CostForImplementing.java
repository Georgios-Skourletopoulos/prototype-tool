/**
 * This class was automatically generated by using the new JPA Entities from Tables.
 */
package com.example.model;

import java.io.Serializable;

import javax.persistence.*;

import java.math.BigDecimal;

/**
 * CostForImplementing is the persistent class for the costforimplementing database table.
 * @author Georgios Skourletopoulos
 * @version 6 August 2013
 */
@Entity
@NamedQuery(name="CostForImplementing.findAll", query="SELECT c FROM CostForImplementing c")
public class CostForImplementing implements Serializable {

	private static final long serialVersionUID = 1L;

	@Id
	@GeneratedValue(strategy=GenerationType.AUTO)
	private Long id;    //each cost for Implementing estimation has a unique ID

	private BigDecimal avgMonthlySalary;
	private String confidence;
	private BigDecimal effortApplied;
	private String justification;
	private String marketFlexibility;
	private String name;
	private String productFlexibility;
	private String realOptionsValuation;
	private String riskOfFutureTD;

	@ManyToOne
	@JoinColumn(name = "userId")
	private UserLogin userId;

	private int weightConfiguration;
	private int weightDeployment;
	private int weightDevelopment;
	private int weightInfrastructure;
	private int weightLicences;

	public CostForImplementing() {}    //the implicit constructor

	/**
	 * The explicit contructor that is used to create the cost for Implementing object.
	 * @param userId each user's ID (each user has a unique ID)
	 * @param name the estimation's name
	 * @param weightDevelopment the weighted priority rating for the Development process
	 * @param weightConfiguration the weighted priority rating for the Configuration process
	 * @param weightDeployment the weighted priority rating for the Deployment process
	 * @param weightLicences the weighted priority rating for the Licenses process
	 * @param weightInfrastructure the weighted priority rating for the Infrastructure process
	 * @param effortApplied the effort applied in man-months
	 * @param avgMonthlySalary the average monthly salary per employee
	 * @param confidence the confidence for the estimation provided
	 * @param productFlexibility the product flexibility
	 * @param marketFlexibility the market flexibility
	 * @param riskOfFutureTD the risk of entering into a Technical Debt in the future
	 * @param realOptionsValuation the real options valuation if Technical Debt tends to incur in the future
	 * @param justification the justification for the Project Manager
	 */
	public CostForImplementing(UserLogin userId, String name, 
			int weightDevelopment, int weightConfiguration, int weightDeployment, 
			int weightLicences, int weightInfrastructure, BigDecimal effortApplied,
			BigDecimal avgMonthlySalary, String confidence, String productFlexibility, 
			String marketFlexibility, String riskOfFutureTD, 
			String realOptionsValuation, String justification) {
		this.userId = userId;
		this.name = name;
		this.weightDevelopment = weightDevelopment;
		this.weightConfiguration = weightConfiguration;
		this.weightDeployment = weightDeployment;
		this.weightLicences = weightLicences;
		this.weightInfrastructure = weightInfrastructure;
		this.effortApplied = effortApplied;
		this.avgMonthlySalary = avgMonthlySalary;
		this.confidence = confidence;
		this.productFlexibility = productFlexibility;
		this.marketFlexibility = marketFlexibility;
		this.riskOfFutureTD = riskOfFutureTD;
		this.realOptionsValuation = realOptionsValuation;
		this.justification = justification;
	}

	/**
	 * Getter for the estimation's ID
	 * @return this.id as Long
	 */
	public Long getId() {
		return this.id;
	}

	/**
	 * Getter for the estimation's average monthly salary per employee
	 * @return this.avgMonthlySalary as BigDecimal
	 */
	public BigDecimal getAvgMonthlySalary() {
		return this.avgMonthlySalary;
	}

	/**
	 * Setter for the estimation's average monthly salary per employee
	 * @param avgMonthlySalary the new average monthly salary per employee to set
	 */
	public void setAvgMonthlySalary(BigDecimal avgMonthlySalary) {
		this.avgMonthlySalary = avgMonthlySalary;
	}

	/**
	 * Getter for the estimation's confidence
	 * @return this.confidence as a String
	 */
	public String getConfidence() {
		return this.confidence;
	}

	/**
	 * Setter for the estimation's confidence
	 * @param confidence the new confidence to set
	 */
	public void setConfidence(String confidence) {
		this.confidence = confidence;
	}

	/**
	 * Getter for the estimation's effort applied in man-months
	 * @return this.effortApplied as a BigDecimal
	 */
	public BigDecimal getEffortApplied() {
		return this.effortApplied;
	}

	/**
	 * Setter for the estimation's effort applied in man-months
	 * @param effortApplied the new applied effort to set
	 */
	public void setEffortApplied(BigDecimal effortApplied) {
		this.effortApplied = effortApplied;
	}

	/**
	 * Getter for the estimation's justification
	 * @return this.justification as a String
	 */
	public String getJustification() {
		return this.justification;
	}

	/**
	 * Setter for the estimation's justification
	 * @param justification the new justification to set
	 */
	public void setJustification(String justification) {
		this.justification = justification;
	}

	/**
	 * Getter for the estimation's market flexibility
	 * @return this.marketFlexibility as a String
	 */
	public String getMarketFlexibility() {
		return this.marketFlexibility;
	}

	/**
	 * Setter for the estimation's market flexibility
	 * @param marketFlexibility the new market flexibility to set
	 */
	public void setMarketFlexibility(String marketFlexibility) {
		this.marketFlexibility = marketFlexibility;
	}

	/**
	 * Getter for the estimation's name
	 * @return this.name as a String
	 */
	public String getName() {
		return this.name;
	}

	/**
	 * Setter for the estimation's name
	 * @param name the new name to set
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * Getter for the estimation's product flexibility
	 * @return this.productFlexibility as a String
	 */
	public String getProductFlexibility() {
		return this.productFlexibility;
	}

	/**
	 * Setter for the estimation's product flexibility
	 * @param productFlexibility the new product flexibility to set
	 */
	public void setProductFlexibility(String productFlexibility) {
		this.productFlexibility = productFlexibility;
	}

	/**
	 * Getter for the estimation's real options valuation
	 * @return this.realOptionsValuation as a String
	 */
	public String getRealOptionsValuation() {
		return this.realOptionsValuation;
	}

	/**
	 * Setter for the estimation's real options valuation
	 * @param realOptionsValuation the new real options valuation to set
	 */
	public void setRealOptionsValuation(String realOptionsValuation) {
		this.realOptionsValuation = realOptionsValuation;
	}

	/**
	 * Getter for the estimation's risk of entering into a TD in the future
	 * @return this.riskOfFutureTD as a String
	 */
	public String getRiskOfFutureTD() {
		return this.riskOfFutureTD;
	}

	/**
	 * Setter for the estimation's risk of entering into a TD in the future
	 * @param riskOfFutureTD the new risk of future TD to set
	 */
	public void setRiskOfFutureTD(String riskOfFutureTD) {
		this.riskOfFutureTD = riskOfFutureTD;
	}

	/**
	 * Getter for the user that owns that estimation by his ID
	 * @return this.userId as a UserLogin object
	 */
	public UserLogin getUserId() {
		return this.userId;
	}

	/**
	 * Setter for the user that owns that estimation by his ID
	 * @param userId the new user ID to set
	 */
	public void setUserId(UserLogin userId) {
		this.userId = userId;
	}

	/**
	 * Getter for the estimation's weighted priority rating for the Configuration process
	 * @return this.weightConfiguration as an integer
	 */
	public int getWeightConfiguration() {
		return this.weightConfiguration;
	}

	/**
	 * Setter for the estimation's weighted priority rating for the Configuration process
	 * @param weightConfiguration the new weighted priority rating for the Configuration process to set
	 */
	public void setWeightConfiguration(int weightConfiguration) {
		this.weightConfiguration = weightConfiguration;
	}

	/**
	 * Getter for the estimation's weighted priority rating for the Deployment process
	 * @return this.weightDeployment as an integer
	 */
	public int getWeightDeployment() {
		return this.weightDeployment;
	}

	/**
	 * Setter for the estimation's weighted priority rating for the Deployment process
	 * @param weightDeployment the new weighted priority rating for the Deployment process to set
	 */
	public void setWeightDeployment(int weightDeployment) {
		this.weightDeployment = weightDeployment;
	}

	/**
	 * Getter for the estimation's weighted priority rating for the Development process
	 * @return this.weightDevelopment as an integer
	 */
	public int getWeightDevelopment() {
		return this.weightDevelopment;
	}

	/**
	 * Setter for the estimation's weighted priority rating for the Development process
	 * @param weightDevelopment the new weighted priority rating for the Development process to set
	 */
	public void setWeightDevelopment(int weightDevelopment) {
		this.weightDevelopment = weightDevelopment;
	}

	/**
	 * Getter for the estimation's weighted priority rating for the Infrastructure process
	 * @return this.weightInfrastructure as an integer
	 */
	public int getWeightInfrastructure() {
		return this.weightInfrastructure;
	}

	/**
	 * Setter for the estimation's weighted priority rating for the Infrastructure process
	 * @param weightInfrastructure the new weighted priority rating for the Infrastructure process to set
	 */
	public void setWeightInfrastructure(int weightInfrastructure) {
		this.weightInfrastructure = weightInfrastructure;
	}

	/**
	 * Getter for the estimation's weighted priority rating for the Licenses process
	 * @return this.weightLicences as an integer
	 */
	public int getWeightLicences() {
		return this.weightLicences;
	}

	/**
	 * Setter for the estimation's weighted priority rating for the Licenses process
	 * @param weightLicences the new weighted priority rating for the Licenses process to set
	 */
	public void setWeightLicences(int weightLicences) {
		this.weightLicences = weightLicences;
	}

	/**
	 * Redefining the equality between two CostForImplementing objects. 
	 */
	@Override
	public boolean equals(Object o) {
		if (this == o) {
			return true;
		}
		if (!(o instanceof CostForImplementing)) {
			return false;
		}
		final CostForImplementing cfi = (CostForImplementing) o;
		if (name == null) {
			return cfi.name == null;
		}
		else if (!userId.equals(cfi.getUserId()))
			return false;

		return name.equalsIgnoreCase(cfi.name);
	}

	/**
	 * Redefining the hash code of a CostForImplementing object.
	 * @return name.hashCode() + userId.hashCode(), the hash code of the object
	 */
	@Override
	public int hashCode() {
		if (name != null) {
			return (name.hashCode() + userId.hashCode());
		}
		return 0;
	}
}
